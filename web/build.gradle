plugins {
    id "com.moowork.node" version "1.2.0"
    id "com.github.hierynomus.license" version"0.14.0"
}

def ciBuild = System.env['BuildRunner'] != null
def ciPublishBuild = ciBuild && (System.env['APPVEYOR_REPO_TAG'] == "true" || System.env['NPM_PUBLISH'] == "true")
def isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows();
def e2eTestsEnabled = isWindows && System.env['BuildRunner'] != "MyGet" && System.env['PLEXUS_BUILD_SKIP_WEB_TESTS'] != 'true'
def ciFullBuild = ciBuild && e2eTestsEnabled
def npmVersion = System.getenv("PLEXUS_BUILD_NPM_VERSION") ?: (System.getenv("APPVEYOR_REPO_TAG_NAME") ?: System.getenv("PackageVersion")) 

node {
    version = '8.5.0'
    nodeModulesDir = projectDir
    download = true
}

license {
    header file("${rootDir}/LICENSE_HEADER")
    mapping {
        ts='JAVADOC_STYLE'
        proto='DOUBLESLASH_STYLE'
        interop='DOUBLESLASH_STYLE'
    }
    strictCheck true
}

task licenseFormatTS(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: ".").exclude("**/node_modules/*")
            .include("**/*.ts").include("**/*.proto").include("**/*.interop")
}

tasks["license"].dependsOn licenseFormatTS
licenseFormat.dependsOn licenseFormatTS

task npmRunInstall(type: NpmTask) {
    args = ['install'];
}

task preNpmBuild {
    doLast {
        println "NPM version: $npmVersion"
	    println "CI Publish: $ciPublishBuild"
	    println "CI Full: $ciFullBuild"
	    println "CI Build: $ciBuild"
    }
}

task npmBuild(type: NpmTask, dependsOn: ['npmRunInstall', 'preNpmBuild']) {
    // https://github.com/srs/gradle-node-plugin/issues/128
    environment = [
        'PLEXUS_BUILD_NPM_VERSION': npmVersion
    ]
    args =  ciPublishBuild ? ['run', 'ci-publish'] :
            ciFullBuild ? ['run', 'ci-build-e2e'] : 
            ciBuild ? ['run', 'ci-build'] :
            isWindows ? ['run', 'build-win'] : ['run', 'build']
}

task buildTransport(dependsOn: npmBuild) {
    outputs.dir('.')
}

task build(dependsOn: buildTransport) {
}

build.dependsOn('license')
