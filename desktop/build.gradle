import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "com.github.hierynomus.license" version"0.14.0"
    id "de.undercouch.download" version "3.2.0"
}

license {
    header file("${rootDir}/LICENSE_HEADER")
    mapping {
        cs='JAVADOC_STYLE'
        proto='DOUBLESLASH_STYLE'
        interop='DOUBLESLASH_STYLE'
    }
    strictCheck true
}

task licenseFormatCS(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: 'src').exclude("**/bin/*").exclude("**/obj/*")
            .exclude("**/google/protobuf/*.proto")
            .include("**/*.cs").include("**/*.proto").include("**/*.interop")
}

tasks["license"].dependsOn licenseFormatCS
licenseFormat.dependsOn licenseFormatCS

task downloadDotnet << {
    download {
        onlyIfNewer true
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            src 'https://download.microsoft.com/download/1/1/5/115B762D-2B41-4AF3-9A63-92D9680B9409/dotnet-sdk-2.1.4-win-x86.zip'
            dest "$buildDir/win32/sdk/dotnet.zip"
        } else if (Os.isFamily(Os.FAMILY_MAC)){
            src 'https://download.microsoft.com/download/1/1/5/115B762D-2B41-4AF3-9A63-92D9680B9409/dotnet-sdk-2.1.4-osx-x64.tar.gz'
            dest "$buildDir/unix/sdk/dotnet.tar.gz"
        } else {
            src 'https://download.microsoft.com/download/1/1/5/115B762D-2B41-4AF3-9A63-92D9680B9409/dotnet-sdk-2.1.4-linux-x64.tar.gz'
            dest "$buildDir/unix/sdk/dotnet.tar.gz"
        }
    }
}

task downloadAndUnzipDotnet << {

    copy {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            from zipTree("$buildDir/win32/sdk/dotnet.zip")
            into "$buildDir/win32/sdk/dotnet"
        } else {
            from tarTree(resources.gzip("$buildDir/unix/sdk/dotnet.tar.gz"))
            into "$buildDir/unix/sdk/dotnet"
        }
    }
}

downloadAndUnzipDotnet.dependsOn(downloadDotnet)

task compile(type:Exec) {
    workingDir projectDir    
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        if (System.env['PLEXUS_BUILD_FULL_DOTNET'] != null) {
           commandLine 'cmd', '/c', 'build.cmd'
	} else {
           commandLine 'cmd', '/c', 'build-netcore-only.cmd'
        }
    } else {
        commandLine "$projectDir/build-netcore-only.sh"
    }
}

compile.dependsOn('license')

task test(dependsOn: compile, type:Exec) {
    workingDir projectDir    
    ignoreExitValue true
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        if (System.env['PLEXUS_BUILD_FULL_DOTNET'] != null) {
            commandLine 'cmd', '/c', 'tests.cmd'
        } else {
            commandLine 'cmd', '/c', 'tests-netcore-only.cmd'
        }
    } else {
  	// For now tests can only run on Windows
        // commandLine "$projectDir/tests-netcore-only.sh"
    }
}

task build {}
if (Os.isFamily(Os.FAMILY_WINDOWS) && System.env['BuildRunner'] != "MyGet") {
    build.dependsOn(test)
} else {
    println "Skipping tests because current platform is not Windows or running in MyGet"
    build.dependsOn(compile)
}

task clean {
    delete fileTree(dir: 'src').include("**/bin/*").include("**/obj/*")
}

def dotnetVersion = new ByteArrayOutputStream()
exec{    
    commandLine "dotnet", "--version"
    ignoreExitValue true
    standardOutput = dotnetVersion;
}

println "Full dotnet build: " + (System.env['PLEXUS_BUILD_FULL_DOTNET'] != null)
println "dotnet --version:\n$dotnetVersion";

if ("$dotnetVersion".trim() != "2.1.4") {
	println "Dotnet SDK is not installed"
        build.doFirst {
	   println "Adding dotnet SDK to path"
           if (Os.isFamily(Os.FAMILY_WINDOWS)) {
              environment "PATH", "$buildDir/win32/sdk/dotnet/"
           } else {
              environment "PATH", "/usr/local/bin:/bin:/usr/bin:$buildDir/unix/sdk/dotnet/"
           }
	}
	build.dependsOn(downloadAndUnzipDotnet)

	test.dependsOn(downloadAndUnzipDotnet)
        test.doFirst {
	   println "Adding dotnet SDK to path"
           if (Os.isFamily(Os.FAMILY_WINDOWS)) {
              environment "PATH", "$buildDir/win32/sdk/dotnet/"
           } else {
              environment "PATH", "/usr/local/bin:/bin:/usr/bin:$buildDir/unix/sdk/dotnet/"
           }
	}
} else {
	println "Dotnet SDK is already installed"
}